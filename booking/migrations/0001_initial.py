# Generated by Django 2.1.2 on 2018-11-12 20:25

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='HotelOwner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('hasHotel', models.BooleanField(default=False)),
                ('phone_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': (('has_hotel', 'Has hotel.'),),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hotel_name', models.CharField(max_length=120, verbose_name='Your hotel name')),
                ('hotel_country', models.CharField(max_length=50, verbose_name='Your hotel country')),
                ('hotel_city', models.CharField(max_length=100, verbose_name='Your hotel city')),
                ('hotel_zip_code', models.CharField(default='43-701', max_length=6, verbose_name='Your hotel zip code')),
                ('hotel_street', models.CharField(max_length=100, verbose_name='Your hotel street')),
                ('hotel_street_number', models.IntegerField(default=0, verbose_name='Your hotel street number')),
                ('hotel_place_number', models.IntegerField(default=0, verbose_name='Your hotel place number')),
                ('hotel_short_desc', models.TextField(max_length=200, verbose_name='Briefly describe your hotel')),
                ('hotel_long_desc', models.TextField(max_length=2000, verbose_name='Full description of your hotel')),
                ('hotel_image', models.FileField(upload_to='', verbose_name='Upload image with your hotel')),
                ('hotel_rating', models.FloatField(default=0.0)),
                ('hotel_room_sgl', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of single rooms in your hotel')),
                ('hotel_room_dbl', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of double rooms in your hotel')),
                ('hotel_room_twin', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of twin rooms in your hotel')),
                ('hotel_room_tpl', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of triple rooms in your hotel')),
                ('hotel_room_qdbl', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of quad rooms in your hotel')),
                ('hotel_room_family', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of family rooms in your hotel')),
                ('hotel_room_apartment', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of apartment rooms in your hotel')),
                ('hotel_room_sgl_price', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Your hotel single room price in $')),
                ('hotel_room_dbl_price', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Your hotel double room price in $')),
                ('hotel_room_twin_price', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Your hotel twin room price in $')),
                ('hotel_room_tpl_price', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Your hotel triple room price in $')),
                ('hotel_room_qdbl_price', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Your hotel quad room price in $')),
                ('hotel_room_family_price', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Your hotel family room price in $')),
                ('hotel_room_apartment_price', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Your hotel apartment room price in $')),
                ('hotel_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Opinion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opinion_date', models.DateField()),
                ('opinion_content', models.TextField()),
                ('opinion_rating', models.FloatField(choices=[(0.0, 'Very Bad'), (1.0, 'Badly'), (2.0, 'Moderation'), (3.0, 'Good'), (4.0, 'Very Good'), (5.0, 'Excellent')])),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reservation_from', models.DateField()),
                ('reservation_to', models.DateField()),
                ('reservation_room_sgl_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('reservation_room_dbl_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('reservation_room_twin_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('reservation_room_tpl_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('reservation_room_qdbl_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('reservation_room_family_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('reservation_room_apartment_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('reservation_hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking.Hotel')),
                ('reservation_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReservationDays',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reservation_room', models.CharField(max_length=100)),
                ('reservation_dates', models.DateField()),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking.Reservation')),
            ],
        ),
        migrations.AddField(
            model_name='opinion',
            name='opinion_to',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='booking.Reservation'),
        ),
    ]
